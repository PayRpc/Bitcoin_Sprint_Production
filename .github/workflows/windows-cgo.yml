name: Windows Development Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-windows:
    name: Windows Dev Build
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x"
          cache: true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Go private module auth (optional)
        if: ${{ env.GH_PAT != '' }}
        shell: pwsh
        run: |
          git config --global url."https://${{ env.GH_PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: Show architecture
        shell: pwsh
        run: |
          Write-Host "Windows architecture: $env:PROCESSOR_ARCHITECTURE"
          go env GOARCH
          go env GOOS

      - name: Go mod tidy
        shell: pwsh
        run: go mod tidy

      - name: Build Rust securebuffer (if available)
        shell: pwsh
        run: |
          if (Test-Path "secure/rust/Cargo.toml") {
            Write-Host "Building Rust securebuffer..."
            Push-Location secure/rust
            cargo build --release
            Pop-Location
          } else {
            Write-Host "Rust securebuffer not found - proceeding without"
          }

      - name: Test Go build (production no-ZMQ)
        shell: pwsh
        run: |
          $env:CGO_ENABLED = "0"
          Write-Host "Running production build without ZMQ..."
          go build -tags nozmq -v ./cmd/sprintd 2>&1 | Tee-Object -Variable buildOutput
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ Production build failed"
            exit 1
          } else {
            Write-Host "✅ Production build succeeded"
          }

      - name: Test Go build (with CGO, ZMQ optional)
        shell: pwsh
        run: |
          $env:CGO_ENABLED = "1"
          Write-Host "Testing CGO build with ZMQ fallback..."
          
          # Try with ZMQ first
          go build -v ./cmd/sprintd 2>&1 | Out-Null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ CGO build with ZMQ succeeded"
          } else {
            Write-Host "⚠️ ZMQ not available, testing nozmq fallback"
            go build -tags nozmq -v ./cmd/sprintd 2>&1 | Out-Null
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ CGO build with nozmq fallback succeeded"
            } else {
              Write-Host "❌ Both ZMQ and nozmq builds failed"
              exit 1
            }
          }

      - name: Run Go tests (production mode)
        shell: pwsh
        run: |
          $env:CGO_ENABLED = "0"
          Write-Host "Running Go tests in production mode..."
          go test -tags nozmq -v ./... -timeout=10m
          if ($LASTEXITCODE -ne 0) {
            Write-Host "⚠️ Some tests failed"
          } else {
            Write-Host "✅ All tests passed"
          }

      - name: Check file integrity
        shell: pwsh
        run: |
          Write-Host "Checking Go file integrity..."
          $corruptedFiles = @()
          $emptyFiles = @()
          $goFiles = Get-ChildItem -Path . -Filter "*.go" -Recurse

          foreach ($file in $goFiles) {
            $size = (Get-Item -Path $file.FullName).Length
            if ($size -eq 0) {
              Write-Host "::warning ::Empty file detected: $($file.FullName)"
              $emptyFiles += $file.FullName
            }
          }

          if ($emptyFiles.Count -gt 0) {
            Write-Host "::error ::Found $($emptyFiles.Count) empty Go files!"
            exit 1
          } else {
            Write-Host "✅ No empty files detected"
          }

      - name: Build production sprintd binary
        shell: pwsh
        run: |
          Write-Host "Building production Bitcoin Sprint binary..."
          $env:CGO_ENABLED = "0" 
          go build -tags nozmq -ldflags="-s -w" -o bitcoin-sprint-windows-production.exe ./cmd/sprintd
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ Production binary build failed"
            exit 1
          } else {
            Write-Host "✅ Production binary build succeeded"
            Get-Item -Path bitcoin-sprint-windows-production.exe | Select-Object Name, Length, LastWriteTime | Format-Table
            
            # Test binary execution
            Write-Host "Testing binary execution..."
            .\bitcoin-sprint-windows-production.exe --version
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Binary executes successfully"
            } else {
              Write-Host "⚠️ Binary execution test failed"
            }
          }

      - name: Upload production binary
        uses: actions/upload-artifact@v4
        with:
          name: bitcoin-sprint-windows-production
          path: bitcoin-sprint-windows-production.exe

      - name: Upload binary
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: bitcoin-sprint-windows
          path: bitcoin-sprint-windows.exe
